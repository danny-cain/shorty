<?php

namespace CannyDain\Shorty\Bootstrap;

use CannyDain\Lib\CommentsManager\CommentsManager;
use CannyDain\Lib\Database\Listeners\FileLoggerQueryListener;
use CannyDain\Lib\Routing\Interfaces\RouterInterface;
use CannyDain\Shorty\Comments\ShortyCommentsManager;
use CannyDain\Shorty\Config\ShortyConfiguration;
use CannyDain\Shorty\ECommerce\Managers\DiscountManager;
use CannyDain\Shorty\ECommerce\Managers\ShippingManager;
use CannyDain\Shorty\Navigation\NavigationProvider;
use CannyDain\Shorty\Routing\URIManager;
use CannyDain\ShortyCoreModules\Payment_Invoice\Providers\InvoicePaymentProvider;
use CannyDain\ShortyCoreModules\SimpleShop\Providers\SimpleShopProductProvider;
use CannyDain\ShortyCoreModules\URIManager\Managers\ManagedRoutingURIManager;
use CannyDain\ShortyCoreModules\URIManager\Router\ManagedRouter;

class ShortyBootstrap extends BaseBootstrap
{
    protected function _debugSetup()
    {
        parent::_debugSetup(); // TODO: Change the autogenerated stub
        // query logging
            $logDirectory = $this->_config->getValue(ShortyConfiguration::CONFIG_KEY_CLASSES_ROOT).'/logs/';

            if (!file_exists($logDirectory))
                @mkdir($logDirectory, 0777, true);

            $this->_database->registerQueryListener(new FileLoggerQueryListener($logDirectory.'database.log', true));

        // ecommerce debug setup (shipping and discounts)
            $this->_ecommerce->setShippingManager(new ShippingManager(500));
            $this->_ecommerce->setDiscountManager(new DiscountManager(array
            (
                'dc' => 500,
                'free-stuff' => 1000
            )));
    }

    /**
     * @return CommentsManager
     */
    protected function _factory_CommentsManager()
    {
        return new ShortyCommentsManager();
    }

    protected function _factory_Emailer()
    {
        return parent::_factory_Emailer();
    }


    /**
     * @return NavigationProvider
     */
    protected function _factory_NavigationProvider()
    {
        return new \CannyDain\ShortyCoreModules\ShortyNavigation\Providers\NavigationProvider();
    }

    /**
     * @return URIManager
     */
    protected function _factory_URIManager()
    {
        return new ManagedRoutingURIManager();
    }

    protected function _factory_ProductProvider()
    {
        $productProvider = new SimpleShopProductProvider();
        $this->_dependencyInjector->applyDependencies($productProvider);

        return $productProvider;
    }

    protected function _registerPaymentProviders()
    {
        $invoiceProvider = new InvoicePaymentProvider();
        $this->_dependencyInjector->applyDependencies($invoiceProvider);
        $this->_ecommerce->addPaymentProvider($invoiceProvider);
    }

    /**
     * @return RouterInterface
     */
    protected function _factory_Router()
    {
        return new ManagedRouter();
    }
}