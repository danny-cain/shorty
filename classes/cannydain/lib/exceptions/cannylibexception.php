<?php

namespace CannyDain\Lib\Exceptions;

use Exception;

abstract class CannyLibException extends \Exception
{
    protected $_trace = array();

    public function __construct($message = "", $code = 0, Exception $previous = null)
    {
        parent::__construct($message, $code, $previous); // TODO: Change the autogenerated stub
        $this->_trace = debug_backtrace();
    }


    public function display()
    {
        echo '<h1>Exception:</h1>';

        $this->_displayMessage();
        $this->_displayStackTrace();
        $this->_displayExceptionDetail();
    }

    protected function _displayMessage()
    {
        echo '<div>';
            echo get_class($this).': '.$this->getMessage();
        echo '</div>';
    }

    protected function _displayStackTrace()
    {
        echo '<h2>Stack Trace:</h2>';

        echo '<div style="width: 100%; overflow: auto; ">';
            foreach ($this->_trace as $trace)
            {
                $class = null;
                $function = null;
                if (isset($trace['class']))
                    $class = $trace['class'];
                if (isset($trace['function']))
                    $function = $trace['function'];

                $file = 'undefined';
                $line = 'undefined';
                if (isset($trace['file']))
                    $file = $trace['file'];
                if (isset($trace['line']))
                    $line = $trace['line'];

                $calledFrom = $file.' @ line '.$line;

                echo '<pre>';
                    if ($class != null)
                        echo $class.'::'.$function.' called from '.$calledFrom;
                    elseif ($function != null)
                        echo $function.' called from '.$calledFrom;
                    else
                        echo '__MAIN__ called from '.$calledFrom;
                echo '</pre>';
            }
        echo '</div>';
    }

    protected function _displayExceptionDetail()
    {

    }
}