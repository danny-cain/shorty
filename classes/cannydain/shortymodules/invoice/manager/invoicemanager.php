<?php

namespace CannyDain\ShortyModules\Invoice\Manager;

use CannyDain\Shorty\Consumers\ModuleConsumer;
use CannyDain\Shorty\Consumers\ProductManagerConsumer;
use CannyDain\Shorty\ECommerce\Basket\BasketHelperInterface;
use CannyDain\Shorty\ECommerce\Products\ProductManager;
use CannyDain\Shorty\Finance\Interfaces\InvoiceItemInterface;
use CannyDain\Shorty\Finance\Interfaces\InvoiceInterface;
use CannyDain\Shorty\Modules\ModuleManager;
use CannyDain\ShortyModules\Invoice\InvoiceModule;
use CannyDain\ShortyModules\Invoice\Models\Invoice;
use CannyDain\ShortyModules\Invoice\Models\InvoiceItem;

class InvoiceManager extends \CannyDain\Shorty\Finance\InvoiceManager implements ModuleConsumer, ProductManagerConsumer
{
    /**
     * @var InvoiceModule
     */
    protected $_invoiceModule;

    /**
     * @var ProductManager
     */
    protected $_productManager;

    public function updateItemDiscounts($invoiceID)
    {
        parent::updateItemDiscounts($invoiceID); // TODO: Change the autogenerated stub
    }

    public function createFromBasket(BasketHelperInterface $basket)
    {
        $invoice = $this->_invoiceModule->getDatasource()->createInvoice();

        $invoice->setBillingAddress($basket->getBillingAddress());
        $invoice->setDeliveryAddress($basket->getDeliveryAddress());
        $invoice->setStatus(InvoiceInterface::STATUS_TO_BE_INVOICED);
        $invoice->save();

        foreach ($basket->getProductGUIDs() as $guid)
        {
            $product = $this->_productManager->getProductInfo($guid);
            $item = $this->_invoiceModule->getDatasource()->createInvoiceItem();

            $item->setStatus(InvoiceItemInterface::STATUS_TO_BE_PROCESSED);
            $item->setQuantity($basket->getQuantityOfGUID($guid));
            $item->setInvoiceID($invoice->getId());
            $item->setLineDiscountInPence(0);
            $item->setName($product->getName());
            $item->setPricePerUnitInPence($product->getPricePerUnitInPence());
            $item->setTaxRate($product->getTaxRate());
            $item->save();
        }

        return $invoice;
    }


    public function getInvoiceByID($id)
    {
        return $this->_invoiceModule->getDatasource()->getInvoiceByID($id);
    }

    public function saveInvoice(InvoiceInterface $invoice)
    {
        if ($invoice instanceof Invoice)
            $invoice->save();
    }

    public function saveInvoiceItem(InvoiceItemInterface $invoiceItem)
    {
        if ($invoiceItem instanceof InvoiceItem)
            $invoiceItem->save();
    }

    public function createInvoice()
    {
        return $this->_invoiceModule->getDatasource()->createInvoice();
    }

    public function createInvoiceItem()
    {
        return $this->_invoiceModule->getDatasource()->createInvoiceItem();
    }

    public function getItemsByInvoice($invoiceID)
    {
        return $this->_invoiceModule->getDatasource()->getInvoiceItemsByInvoiceID($invoiceID);
    }

    public function consumeModuleManager(ModuleManager $manager)
    {
        $this->_invoiceModule = $manager->getModuleByClassname(InvoiceModule::INVOICE_MODULE_NAME);
    }

    public function consumeProductManager(ProductManager $manager)
    {
        $this->_productManager = $manager;
    }
}