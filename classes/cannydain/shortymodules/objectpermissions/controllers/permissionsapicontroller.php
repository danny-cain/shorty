<?php

namespace CannyDain\ShortyModules\ObjectPermissions\Controllers;

use CannyDain\Lib\GUIDS\GUIDManagerInterface;
use CannyDain\Lib\UI\Views\JSONView;
use CannyDain\Shorty\Consumers\GUIDConsumer;
use CannyDain\Shorty\Consumers\UserConsumer;
use CannyDain\Shorty\Controllers\ShortyModuleController;
use CannyDain\Shorty\Helpers\Models\UserInfo;
use CannyDain\Shorty\Helpers\UserHelper;
use CannyDain\ShortyModules\ObjectPermissions\ObjectPermissionsModule;
use CannyDain\ShortyModules\Users\Models\User;

class PermissionsAPIController extends ShortyModuleController implements GUIDConsumer, UserConsumer
{
    const PERMISSIONS_API_CONTROLLER_NAME = __CLASS__;

    /**
     * @var GUIDManagerInterface
     */
    protected $_guids;

    /**
     * @var UserHelper
     */
    protected $_users;

    public function saveObjectPermissions()
    {
        $ret = array
        (
            'status' => 'Fail',
            'message' => 'Unspecified Error',
        );

        $guid = base64_decode($this->_request->getParameter('guid'));

        foreach ($this->_request->getParameters() as $key => $val)
        {
            if (strtolower(substr($key, 0, 11)) != 'permission_')
                continue;

            $consumerGUID = base64_decode(substr($key, 11));
            $permissions = $this->_getModule()->getDatasource()->getOrCreatePermissionModel($consumerGUID, $guid);
            $permissions->setPermissions($val);
            $permissions->save();
        }

        $ret['status'] = 'Ok';
        $ret['message'] = '';

        return new JSONView($ret);
    }

    public function searchConsumers()
    {
        $searchTerm = $this->_request->getParameter('term');
        $data = array();

        /**
         * @var UserInfo $user
         */
        foreach ($this->_users->searchUsers($searchTerm) as $user)
        {
            $data[] = array
            (
                'id' => $user->getId(),
                'guid' => base64_encode($user->getGUID()),
                'name' => $user->getName()
            );
        }

        return new JSONView($data);
    }

    public function searchObjects()
    {
        $searchTerm = $this->_request->getParameter('term');
    }

    /**
     * @return ObjectPermissionsModule
     */
    protected function _getModule()
    {
        return parent::_getModule(); // TODO: Change the autogenerated stub
    }

    protected function _getModuleClassname()
    {
        return ObjectPermissionsModule::OBJECT_PERMISSIONS_MODULE_NAME;
    }

    public function consumeGUIDManager(GUIDManagerInterface $guidManager)
    {
        $this->_guids = $guidManager;
    }

    public function consumerUserHelper(UserHelper $helper)
    {
        $this->_users = $helper;
    }
}